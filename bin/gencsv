#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');

const Utils = require('../lib/utils');
const Preferences = require('../lib/preferences');
const generator = require('../lib/generator');

const argv = require('yargs')
    .command('<file>', 'The output file name')
    .usage('$0 [options] <file> [columns..]\n$0 [options] <file> < columns.txt', {
        chunk: {
            describe: 'The number of rows to generate per pass',
            number: true,
            default: 1000
        },
        functions: {
            alias: 'func',
            describe: 'Lists available functions'
        },
        rows: {
            alias: 'r',
            describe: 'The number of rows to generate (e.g. 100, 100000, 100k, 1M, 1B, etc.)',
            default: 100
        },
        'use-headers': {
            alias: 'h',
            describe: 'Use this flag to set column headers',
            boolean: true,
            default: false
        },
        interactive: {
            alias: 'i',
            describe: 'Run the script in interactive mode with a series of questions and user-provided answers',
            conflicts: 'clear-settings'
        },
        'always-interactive': {
            alias: 'a',
            describe: 'Start the script in interactive mode and save this setting',
            conflicts: 'clear-settings'
        },
        'always-use-headers': {
            describe: 'Use this flag to persist column headers preferences',
            conflicts: 'clear-settings'
        },
        'clear-settings': {
            alias: 'c',
            describe: 'Clear always-interactive settings'
        },
        silent: {
            alias: 's',
            describe: 'Minimal console output',
            boolean: true,
            default: false
        }
    })
    .help()
    .version(require('../package.json').version)
    .argv;

if (argv.functions) {
    console.log('Available functions:');
    Utils.functions(require('../functions'));
    process.exit(0);
}

if (argv.c) {
    console.log('Removing settings...');

    Preferences.truncate(
        () => {
            console.log(`Successfully removed ${chalk.cyan(Preferences.file())}`);

            if (argv._.length <= 1) {
                process.exit(0);
            }
        },
        () => {
            console.log(`Error removing ${chalk.redBright(Preferences.file())}`);
            console.log('Attempting to run command...\n');
        }
    )
}

if (Preferences.isInteractive() || argv.i) {
    require('../index');
    return;
}

if (argv.a) {
    Preferences.save('interactive', true, () => {
        console.log(`Settings written to ${chalk.cyan(Preferences.file())}`);
        setTimeout(() => require('../index'), 500);
    });

    return;
}

if (argv._.length <= 1 && process.stdin.isTTY) {
    console.log(chalk.redBright('You must define an output file name and at least one column definition!'));
    process.exit(1);
}

if (Preferences.alwaysUseHeaders()) {
    argv['use-headers'] = true;
}

const outFile = argv._[0];
let columns = argv._.slice(1);
let rows = 100;

if (argv.r !== 100) {
    try {
        rows = Utils.convertNumber(argv.r);
    } catch (e) {
        console.log(chalk.redBright('Invalid row number'));
        process.exit(1);
    }
}

if (columns.length === 0) {
    let data = '';

    const rl = require('readline').createInterface({
        input: process.stdin,
        output: process.stdout,
        terminal: false
    });

    rl.on('line', line => {
        data += line;
        data += '\n';
    }).on('close', () => {
        if (!argv.q) {
            console.log('Columns definitions received! Validating...');
        }

        let lines = data.split('\n');
        let headers = '';

        if (lines.length > 2) {
            columns = lines[1].split(/\s*,\s*/);
            headers = lines[0];
        } else {
            columns = lines[0].split(/\s*,\s*/);
        }

        Utils.generate(outFile, columns, {
            rows: rows,
            chunks: argv.chunk,
            headers: argv['use-headers'] || headers.length > 0,
            silent: argv.silent
        }, headers.split(/\s*,\s*/));
    });
} else {
    Utils.generate(outFile, columns, {
        rows: rows,
        chunks: argv.chunk,
        headers: argv['use-headers'],
        silent: argv.silent
    });
}
